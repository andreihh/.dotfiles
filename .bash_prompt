# ~/.bash_prompt: this file customizes the shell prompt.

# Returns the current `git` branch and dirty status.
_git_branch() {
  git rev-parse --is-inside-work-tree &>/dev/null || return

  local branch="$(git symbolic-ref --quiet --short HEAD 2> /dev/null || \
    git describe --all --exact-match HEAD 2> /dev/null || \
    git rev-parse --short HEAD 2> /dev/null || \
    echo '(unknown)')"

  local dirty=""
  if [[ $(git status --porcelain 2> /dev/null) ]]; then
    dirty="*"
  fi

  echo "${branch}${dirty}"
}

# Returns the branch name and optionally dirty status of the current VCS branch.
#
# Works with `git`.
_vcs_branch() {
  local git_branch="$(_git_branch)"
  if [[ -n "$git_branch" ]]; then
    echo "$git_branch"
    return
  fi
}

# Makes a custom, dynamic prompt in the following format:
#   `(chroot) user at host on branch in dir $`
#
# The chroot, host and branch are optional. Colors are used only if supported.
# Sets JetBrains Darcula foreground and background colors.
_make_prompt() {
  # If colors are supported, define styles and colors.
  local ncolors=$(tput colors)
  if [[ -n "$ncolors" ]] && [[ $ncolors -ge 8 ]]; then
    local reset_style="\[$(tput sgr0)\]"

    local text_style="\[$(tput sgr0 && tput bold)\]"
    local shell_style="\[$(tput sgr0 && tput bold && tput setaf 2)\]"  # green
    local chroot_style="\[$(tput sgr0 && tput bold && tput setaf 5)\]"  # purple
    local user_style="\[$(tput sgr0 && tput bold && tput setaf 1)\]"  # red
    local host_style="\[$(tput sgr0 && tput bold && tput setaf 6)\]"  # cyan
    local vcs_style="\[$(tput sgr0 && tput bold && tput setaf 3)\]"  # yellow
    local cwd_style="\[$(tput sgr0 && tput bold && tput setaf 4)\]"  # blue

    echo -ne '\e]10;#a9b7c6\e\\'  # set foreground to match Darcula
    echo -ne '\e]11;#262626\e\\'  # set background to match Darcula
  fi

  # Set variable identifying the chroot you work in.
  if [[ -z "${debian_chroot:-}" ]] && [[ -r /etc/debian_chroot ]]; then
    debian_chroot=$(cat /etc/debian_chroot)
  fi

  # Print only the first 3 and last 2 components of the current working
  # directory (not counting `$HOME`, which is collapsed to `~`).
  local cwd='`dirs +0 | sed "s#\(/[^/]\{1,\}/[^/]\{1,\}/[^/]\{1,\}/\).*\(/[^/]\{1,\}/[^/]\{1,\}\)/\{0,1\}#\1...\2#g"`'

  # Set the terminal prompt.
  PS1="${debian_chroot:+${chroot_style}(${debian_chroot}) }"  # set chroot
  PS1+="${user_style}\u"  # set current user

  # Set the host only if the current session is remote.
  if [[ -n "$SSH_TTY" ]]; then
    PS1+="${text_style} at ${host_style}\h"
  fi

  # Set current VCS branch if VCS info is enabled and repository is detected.
  if [[ -n "$VCS_BRANCH_PROMPT_COMMAND" ]]; then
    local branch="$($VCS_BRANCH_PROMPT_COMMAND)"
    if [[ -n "$branch" ]]; then
      PS1+="${text_style} on ${vcs_style}${branch}"
    fi
  fi

  PS1+="${text_style} in ${cwd_style}${cwd}"  # set current working directory
  PS1+="${shell_style} \$ ${reset_style}"  # set shell and reset style

  PS2="${shell_style}> ${reset_style}"  # set shell and reset style

  # If this is an xterm, set the title to user@host:dir.
  case "$TERM" in
    xterm* | rxvt*)
      PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \W\a\]$PS1"
      ;;
    *) ;;
  esac
}

PROMPT_COMMAND=_make_prompt  # set dynamic prompt

# Command used to detect the current VCS branch to be included in the prompt:
# - default is `_vcs_branch`
# - unset to drop VCS info from the prompt
# - set to custom function to work with other systems
export VCS_BRANCH_PROMPT_COMMAND="_vcs_branch"
