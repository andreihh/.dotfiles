#!/usr/bin/env python3
"""
Evaluates an infoarena.ro task found in the current working directory. It
expects a zip archive in the current working directory containing the following
files:
- grader_test*.in
- grader_test*.ok

The name of the tests zip should match the pattern 'problema_${TASK_NAME}.zip'.
The task name is implicitly the name of the current working directory, or it can
be specified as a command-line parameter.

The time and memory limits are implicitly 2 seconds and 64 MiB, or they can be
specified as command-line parameters.
"""

from abc import ABCMeta, abstractmethod
import argparse
import glob
import os
import shutil
import subprocess
import sys
import zipfile


GRADER_TEST = "grader_test"
IN_EXT = "in"
OUT_EXT = "out"
OK_EXT = "ok"
GRADER_EVAL = "grader_eval"
BIN = "bin"


def get_current_dir_name():
    """Returns the name of the current working directory."""
    cwd_path = os.getcwd()
    dir_name = os.path.basename(cwd_path)
    return dir_name


def _format_file_name(file_name, ext):
    return "{}.{}".format(file_name, ext)


def _get_test_name(test_number):
    return "{}{}".format(GRADER_TEST, test_number)


def get_test_in(test_number):
    """Returns the input file name for the given test number."""
    return _format_file_name(_get_test_name(test_number), IN_EXT)


def get_test_ok(test_number):
    """Returns the expected output file name for the given test number."""
    return _format_file_name(_get_test_name(test_number), OK_EXT)


def get_in_file(task_name):
    """Returns input file name for the given task."""
    return _format_file_name(task_name, IN_EXT)


def get_out_file(task_name):
    """Returns output file name for the given task."""
    return _format_file_name(task_name, OUT_EXT)


def get_tests_zip_file(task_name):
    """Returns tests zip archive name for the given task."""
    return "problema_{}.zip".format(task_name)


def _validate_test(test_number):
    test_in_file = get_test_in(test_number)
    test_ok_file = get_test_ok(test_number)
    if not os.path.isfile(test_in_file):
        sys.exit("Missing test input '{}'!".format(test_in_file))
    if not os.path.isfile(test_ok_file):
        sys.exit("Missing expected test output '{}'!".format(test_ok_file))


def _get_test_number(test_in_file):
    return test_in_file[11:-3]


def glob_tests():
    """Returns the list of detected test numbers in the grader working
    directory, or exits with an error if any expected test output files are
    missing.
    """

    tests = [
        _get_test_number(test_in_file)
        for test_in_file in glob.glob("{}*.{}".format(GRADER_TEST, IN_EXT))]
    for test_number in tests:
        _validate_test(test_number)
    return tests


class Grader(metaclass=ABCMeta):
    """An abstract grader for evaluating tasks from infoarena.ro."""

    def __init__(self, task_name, time_limit, memory_limit):
        self._task_name = task_name
        self._time_limit = time_limit
        self._memory_limit = memory_limit

    def unzip_tests(self):
        """Unzips the tests archive for the given task into the grader working
        directory.
        """

        tests_zip = get_tests_zip_file(self._task_name)
        print("Unzipping test archive '{}'...".format(tests_zip))
        try:
            with zipfile.ZipFile(tests_zip, "r") as zip_file:
                zip_file.extractall(BIN)
        except IOError as error:
            sys.exit("Unzipping failed:\n{}".format(error))
        print("Unzipping successful!")

    def evaluate(self):
        """Runs the grader."""
        print("Evaluating task '{}'...".format(self._task_name))
        os.makedirs(BIN, exist_ok=True)
        self._compile_sources()
        (passed, failed) = (0, 0)
        os.chdir(BIN)
        for test_number in glob_tests():
            if self._grade_test(test_number):
                passed += 1
            else:
                failed += 1
        os.chdir(os.pardir)
        print("Evaluation complete!")
        print("{} passed, {} failed.".format(passed, failed))

    def _grade_test(self, test_number):
        print("Running test #{}...".format(test_number))

        test_in_file = get_test_in(test_number)
        test_ok_file = get_test_ok(test_number)
        in_file = get_in_file(self._task_name)
        out_file = get_out_file(self._task_name)
        shutil.copyfile(test_in_file, in_file)

        try:
            self._run()
        except subprocess.TimeoutExpired:
            print("Time limit exceeded!")
            return False
        except subprocess.CalledProcessError as error:
            if "OutOfMemoryError" in error.output:
                print("Memory limit exceeded!")
            else:
                print("Runtime error:\n{}".format(error.output))
            return False

        if Grader._compare(out_file, test_ok_file):
            print("Ok!")
            return True
        else:
            print("Incorrect!")
            return False

    @staticmethod
    def _compare(out_file, ok_file):
        return subprocess.run(
            ["diff", "-q", "-Z", "-B", "-a", out_file, ok_file]).returncode == 0

    @abstractmethod
    def _compile_sources(self):
        pass

    @abstractmethod
    def _run(self):
        pass


class JavaGrader(Grader):
    """A grader for evaluating tasks from infoarena.ro sovled in Java."""

    MAIN_CLASS = "Main"

    def _compile_sources(self):
        print("Compiling *.java sources...")
        sources = glob.glob("*.java")
        try:
            subprocess.check_output(
                ["javac", *sources, "-d", BIN],
                stderr=subprocess.STDOUT,
                universal_newlines=True)  # encoding="utf-8" for python3.6
        except subprocess.CalledProcessError as error:
            sys.exit("Compilation failed:\n{}".format(error.output))
        print("Compilation successful!")

    def _run(self):
        subprocess.check_output(
            ["java", *self._get_java_opts(), JavaGrader.MAIN_CLASS],
            stderr=subprocess.STDOUT,
            universal_newlines=True,  # encoding="utf-8" for python3.6
            timeout=self._time_limit)

    def _get_java_opts(self):
        return [
            "-ea",
            "-Xmx{}m".format(self._memory_limit),
            "-Xms{}m".format(self._memory_limit),
            "-Xss{}m".format(self._memory_limit)]


def main():
    """Parses the passed arguments and runs the grader."""
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "--task-name",
        type=str,
        help="the name of this task (default: name of the current directory)")
    parser.add_argument(
        "--unzip-tests",
        action="store_true",
        help="unzip the tests archive")
    parser.add_argument(
        "--time-limit",
        type=float,
        default=2.0,
        help="time limit in seconds")
    parser.add_argument(
        "--memory-limit",
        type=int,
        default=64,
        help="memory limit in MiB")

    args = parser.parse_args()
    task_name = args.task_name if args.task_name else get_current_dir_name()
    time_limit = args.time_limit
    memory_limit = args.memory_limit

    grader = JavaGrader(task_name, time_limit, memory_limit)
    if args.unzip_tests:
        grader.unzip_tests()
    grader.evaluate()


if __name__ == "__main__":
    main()
